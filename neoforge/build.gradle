plugins {
    id 'net.neoforged.gradle.userdev' version '7.0.57'
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
    id 'maven-publish'
}

var mod_version = mcef_version

version = mod_version
group = mod_packagename

java.toolchain.languageVersion = JavaLanguageVersion.of(java_version as int)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file('run')
        systemProperty 'forge.enabledGameTestNamespaces', 'mcef'
    }

    server {
        workingDirectory project.file('run/server')
        systemProperty 'forge.enabledGameTestNamespaces', 'mcef'
        programArgument '--nogui'
    }
}

//mixin {
//    add sourceSets.main, 'mcef.refmap.json'
//    config 'mcef.mixins.json'
//}

/*
    Add the following to ~/.gradle/gradle.properties
    systemProp.org.gradle.s3.endpoint=https://<the s3 endpoint>
    MCEF_S3_PUBLISH_URL_SNAPSHOT=s3://<bucket>/repositories/snapshots
    MCEF_S3_PUBLISH_URL_RELEASE=s3://<bucket>/repositories/releases
    MCEF_S3_PUBLISH_ACCESS_KEY=<access key>
    MCEF_S3_PUBLISH_SECRET_KEY=<secret key>
 */
publishing {
    repositories {
        maven {
            url ((mcef_version.toString().endsWith("SNAPSHOT")) ? findProperty('MCEF_S3_PUBLISH_URL_SNAPSHOT') : findProperty('MCEF_S3_PUBLISH_URL_RELEASE'))
            credentials(AwsCredentials) {
                accessKey = findProperty('MCEF_S3_PUBLISH_ACCESS_KEY')
                secretKey = findProperty('MCEF_S3_PUBLISH_SECRET_KEY')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = 'com.cinemamod'
            artifactId = 'mcef-neoforge'
            version = mcef_version
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shadowMc.extendsFrom minecraftLibrary
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation(project(':common')) {
        transitive false
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.register('generateJava', Copy) {
    from project(':common').file('src/template/java')
    into "${buildDir}/generated/java"
    expand 'compatibility_version': mod_compatibility_version
}
sourceSets.main.java {
    srcDir "${buildDir}/generated/java"
}
compileJava.dependsOn generateJava

processResources {
    filesMatching('**/*.toml') {
        expand 'mod_id': mod_id,
                'mod_version': mod_version,
                'mod_name': mod_name,
                'neo_version': neo_version,
                'neo_version_range': neo_version_range,
                'loader_version_range': loader_version_range,
                'minecraft_version': minecraft_version
    }
    from("${project(':common').projectDir}/src/main/resources")
}

tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
    source(project(':common').sourceSets.jcef.allSource)
    options.encoding = 'UTF-8'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(['Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_vendor,
                    'Specification-Version'   : "1",
                    'Implementation-Title'    : mod_name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : mod_vendor,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'java-cef-commit'         : project.parent.getCheckedOutGitCommitHash(project.parent)
        ])
    }
    from configurations.shadow.collect { it.isDirectory() ? it : zipTree(it) }
}

tasks.register('deobfJar', Jar) {
    archiveClassifier = 'deobf'
    from sourceSets.main.output
}

curseforge {
    apiKey = file("${rootDir}/curseforge_api_key.txt").exists() ? file("${rootDir}/curseforge_api_key.txt").text : ''
    project {
        id = curse_id
        releaseType = release_type
        addGameVersion minecraft_version
        addGameVersion 'Forge'
        addGameVersion 'NeoForge'
        addGameVersion "Java ${java_version}"
        mainArtifact(jar) {
            displayName = "[FORGE][${minecraft_version}] ${mod_name} ${mod_version}"
        }
    }
}

shadowJar {
    configurations = [project.configurations.shadowMc]
    archiveClassifier = ''
}
shadowJar.dependsOn('reobfJar')